# Generated by Django 5.1.4 on 2025-04-05 00:47

from uuid import uuid4
import django.contrib.postgres.fields
from django.db import migrations, models
from django.core.paginator import Paginator

from abdm.models.transaction import TransactionStatus, TransactionType
from abdm.service.helper import generate_care_contexts_for_existing_data

def create_transactions_for_failed_care_contexts(apps, schema_editor):
    AbhaNumber = apps.get_model("abdm", "AbhaNumber")
    Transaction = apps.get_model("abdm", "Transaction")
    User = apps.get_model("users", "User")

    care_context_set = set()
    for tx in Transaction.objects.filter(type=TransactionType.LINK_CARE_CONTEXT).iterator():
        care_contexts = tx.meta_data.get("care_contexts", [])
        care_context_set.update(care_contexts)

    paginator = Paginator(
        AbhaNumber.objects.filter().select_related("patient").order_by("id"),
        1000,
    )
    for page_num in paginator.page_range:
        bulk_create_data = []
        for abha_number in paginator.get_page(page_num):
            if not abha_number.patient:
                continue

            hf_care_contexts = generate_care_contexts_for_existing_data(abha_number.patient)

            for hf_id in hf_care_contexts:
                care_contexts = hf_care_contexts[hf_id]

                filtered_care_contexts = list(filter(lambda care_context: care_context.get("reference") not in care_context_set, care_contexts))

                if len(filtered_care_contexts) == 0:
                    continue


                transaction = Transaction(
                    reference_id=uuid4(),
                    type=TransactionType.LINK_CARE_CONTEXT,
                    status=TransactionStatus.FAILED,
                    meta_data={
                        "abha_number": str(abha_number.external_id),
                        "type": "hip_initiated_linking",
                        "care_contexts": list(map(lambda x: x["reference"], filtered_care_contexts)),
                        "hf_id": hf_id,
                    },
                    created_by=User.objects.filter(is_superuser=True).first(),
                )
                bulk_create_data.append(transaction)

        Transaction.objects.bulk_create(bulk_create_data)




class Migration(migrations.Migration):

    dependencies = [
        ('abdm', '0015_remove_abhanumber_txn_id_transaction'),
    ]

    operations = [
        migrations.AddField(
            model_name='transaction',
            name='status',
            field=models.SmallIntegerField(choices=[(1, 'Initiated'), (2, 'Completed'), (3, 'Failed'), (4, 'Cancelled')], default=2),
        ),
        migrations.AlterField(
            model_name='consentartefact',
            name='hi_types',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('Prescription', 'Prescription'), ('DiagnosticReport', 'Diagnostic Report'), ('OPConsultation', 'Op Consultation'), ('DischargeSummary', 'Discharge Summary'), ('ImmunizationRecord', 'Immunization Record'), ('HealthDocumentRecord', 'Record Artifact'), ('WellnessRecord', 'Wellness Record'), ('Invoice', 'Invoice')], max_length=20), default=list, size=None),
        ),
        migrations.AlterField(
            model_name='consentrequest',
            name='hi_types',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('Prescription', 'Prescription'), ('DiagnosticReport', 'Diagnostic Report'), ('OPConsultation', 'Op Consultation'), ('DischargeSummary', 'Discharge Summary'), ('ImmunizationRecord', 'Immunization Record'), ('HealthDocumentRecord', 'Record Artifact'), ('WellnessRecord', 'Wellness Record'), ('Invoice', 'Invoice')], max_length=20), default=list, size=None),
        ),
        migrations.RunPython(
            code=create_transactions_for_failed_care_contexts,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
